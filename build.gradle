buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.0.0"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

group= "EngineersWorkshopReborn"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.12.2-14.23.0.2509"
    runDir = "run"

    mappings = "snapshot_20170624"
}

repositories {
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
}

dependencies {
	deobfCompile('RebornCore:RebornCore-1.12.2:+:universal') {
		transitive = false
	}
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	if (project.hasProperty('keyStore')) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}

}

build.dependsOn signJar

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools {
	doLast{
		def cacheFiles = new File(".gradle/curseTools")
		if (!cacheFiles.exists()) {
			cacheFiles.mkdirs()
		}

		def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

		logger.lifecycle(":downloading curseTools metadata")
		FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

		def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
		def curseToolsVersion = metadata.versioning.release

		def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

		logger.lifecycle(":downloading CurseTools")
		FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

		logger.lifecycle(":launching CurseTools")
		ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
			arg(value: jar.archivePath.getAbsolutePath())
			arg(value: deobfJar.archivePath.getAbsolutePath())
			arg(value: apiJar.archivePath.getAbsolutePath())
		}
	}
}